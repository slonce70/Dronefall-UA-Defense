// –ú–æ–¥—É–ª—å UI –º–∞–≥–∞–∑–∏–Ω—É –ü–ü–û
// –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, —è–∫ –ø—Ä–æ—Å–∏–ª–∏

import { calcPurchasePrice, calcSellRefund, calcUpgradePrice } from '../pvo/math.js';

/**
 * @typedef {Object} PvoMenuCtx
 * @property {L.Map} map
 * @property {HTMLElement} pvoMenu
 * @property {Array<any>} pvoTypes
 * @property {Record<string,string>} pvoColorMap
 * @property {Array<any>} pvoList
 * @property {Record<string,number>} pvoPurchaseCounts
 * @property {() => number} getMaxPvoCount
 * @property {() => number} getMoney
 * @property {(v:number)=>void} setMoney
 * @property {() => void} updateMoney
 * @property {() => void} updateUI
 * @property {() => any|null} getAirport
 * @property {(a:any)=>void} setAirport
 * @property {() => boolean} getIsAirportSpawning
 * @property {(v:boolean)=>void} setIsAirportSpawning
 * @property {() => any|null} getProgressBarMarker
 * @property {(m:any)=>void} setProgressBarMarker
 * @property {() => number} getGameSpeed
 * @property {(v:any)=>void} setSelectedPVO
 * @property {() => any|null} getSelectedPVO
 * @property {(v:boolean)=>void} setBuyingMode
 * @property {() => boolean} getBuyingMode
 * @property {(v:boolean)=>void} setMoveMode
 * @property {() => boolean} getMoveMode
 * @property {(v:any)=>void} setMovingPVO
 * @property {() => any|null} getMovingPVO
 * @property {(pos:[number,number])=>void} activateAirport
 */

/**
 * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –º–µ–Ω—é –ü–ü–û —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î API –æ–Ω–æ–≤–ª–µ–Ω—å
 * ctx: –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Ç–∞ —Å—Ç–∞–Ω (–¥–∏–≤. main.js –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É)
 */
export function setupPvoMenu(ctx) {
  const { pvoTypes, pvoMenu, pvoColorMap, map } = ctx;
  // –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –∫–Ω–æ–ø–∫–∏/–µ–ª–µ–º–µ–Ω—Ç–∏ –º–µ–Ω—é
  // (–æ–≥–æ–ª–æ—à—É—é—Ç—å—Å—è —è–∫ const —É –º–æ–º–µ–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è)

  // –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞—Ä—Ç–∫–∏ –ü–ü–û (–æ–∫—Ä—ñ–º –ê–µ—Ä–æ–ø–æ—Ä—Ç–∞)
  pvoTypes.forEach((item) => {
    if (item.name === '–ê–µ—Ä–æ–ø–æ—Ä—Ç') {
      return;
    }
    const el = document.createElement('div');
    el.className = 'pvo-item';
    el.innerHTML = `
      <img src="${item.img}" />
      <b>${item.name}</b><br/>
      üí∂${item.price}<br/>
      üìè${item.radius}
    `;
    el.onclick = () => {
      // –í–∏–±—ñ—Ä —é–Ω—ñ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–Ω–∏)
      if (item.name === 'F-16' && !(ctx.getAirport() && ctx.getAirport().alive)) {
        alert('‚ùå –î–ª—è –ø–æ–∫—É–ø–∫–∏ F-16 —Å–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∞–µ—Ä–æ–ø–æ—Ä—Ç!');
        return;
      }
      const count = ctx.pvoPurchaseCounts[item.name] || 0;
      const price = calcPurchasePrice(item.price, count);
      if (ctx.getMoney() < price) {
        alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤, –ø–æ—Ç—Ä—ñ–±–Ω–æ: ${Math.round(price)} –∫–∞—Ä–±–æ–≤–∞–Ω—Ü—ñ–≤.`);
        return;
      }
      ctx.setSelectedPVO(item);
      ctx.setBuyingMode(true);
      document.querySelectorAll('.pvo-item').forEach((e) => e.classList.remove('selected'));
      el.classList.add('selected');
      if (sellPVOButton) {
        sellPVOButton.disabled = true;
      }
      if (upgradePVOButton) {
        upgradePVOButton.disabled = true;
      }
      if (upgradeInfo) {
        upgradeInfo.textContent = '';
      }
    };
    pvoMenu.appendChild(el);
  });

  // –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
  const airportBtn = document.createElement('button');
  airportBtn.className = 'pvo-button';
  airportBtn.id = 'airportButton';
  airportBtn.innerHTML = 'üè¢<br>–ê–µ—Ä–æ–ø–æ—Ä—Ç<br>üí∂3000';
  airportBtn.style.marginTop = '10px';
  pvoMenu.appendChild(airportBtn);

  const movePVOButton = document.createElement('button');
  movePVOButton.className = 'pvo-button';
  movePVOButton.innerHTML = '‚úàÔ∏è<br>–ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ F-16';
  movePVOButton.disabled = true;
  movePVOButton.style.marginTop = '10px';
  pvoMenu.appendChild(movePVOButton);

  const sellPVOButton = document.createElement('button');
  sellPVOButton.className = 'pvo-button';
  sellPVOButton.id = 'sellPVOButton';
  sellPVOButton.innerHTML = 'üí≤<br>–ü—Ä–æ–¥–∞—Ç–∏ –ü–ü–û';
  sellPVOButton.disabled = true;
  sellPVOButton.style.marginTop = '10px';
  pvoMenu.appendChild(sellPVOButton);

  const upgradePVOButton = document.createElement('button');
  upgradePVOButton.className = 'pvo-button';
  upgradePVOButton.id = 'upgradePVOButton';
  upgradePVOButton.innerHTML = 'üìà<br>–ü–æ–∫—Ä–∞—â–∏—Ç–∏ –ü–ü–û<br>üí∂100';
  upgradePVOButton.disabled = true;
  upgradePVOButton.style.marginTop = '10px';
  pvoMenu.appendChild(upgradePVOButton);

  const upgradeInfo = document.createElement('div');
  upgradeInfo.id = 'upgradeInfo';
  upgradeInfo.style.marginTop = '10px';
  upgradeInfo.style.color = 'white';
  pvoMenu.appendChild(upgradeInfo);

  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
  movePVOButton.onclick = () => {
    const sel = ctx.getSelectedPVO();
    if (sel && sel.name === 'F-16') {
      ctx.setMovingPVO(sel);
      ctx.setMoveMode(true);
    }
  };

  airportBtn.onclick = () => {
    const airportType = pvoTypes.find((p) => p.name === '–ê–µ—Ä–æ–ø–æ—Ä—Ç');
    const count = ctx.pvoPurchaseCounts[airportType.name] || 0;
    const price = calcPurchasePrice(airportType.price, count);
    if (ctx.getMoney() < price) {
      alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤, –ø–æ—Ç—Ä—ñ–±–Ω–æ: ${Math.round(price)} –∫–∞—Ä–±–æ–≤–∞–Ω—Ü—ñ–≤.`);
      return;
    }
    // –û–ø–ª–∞—Ç–∞
    ctx.setMoney(ctx.getMoney() - price);
    ctx.updateMoney();
    ctx.pvoPurchaseCounts[airportType.name] = count + 1;
    updatePvoMenuPrice(airportType.name);

    // –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä –ø–æ–±—É–¥–æ–≤–∏ –∞–µ—Ä–æ–ø–æ—Ä—Ç—É (60 —Å–µ–∫, –º–∞—Å—à—Ç–∞–±—É—î—Ç—å—Å—è —à–≤–∏–¥–∫—ñ—Å—Ç—é –≥—Ä–∏)
    const pos = [2250, 700];
    const container = document.createElement('div');
    container.className = 'progress-bar-container';
    const bar = document.createElement('div');
    bar.className = 'progress-bar';
    container.appendChild(bar);
    const marker = L.marker(pos, {
      icon: L.divIcon({ html: container, className: '', iconSize: [60, 8], iconAnchor: [30, 4] }),
    }).addTo(map);
    ctx.setProgressBarMarker(marker);
    ctx.setIsAirportSpawning(true);
    updatePvoPurchaseAvailability();

    const buildMs = 60000;
    let last = performance.now();
    let acc = 0;
    function step(t) {
      const dt = (t - last) * ctx.getGameSpeed();
      acc += dt;
      last = t;
      const pct = Math.min((acc / buildMs) * 100, 100);
      bar.style.width = pct + '%';
      if (pct >= 100) {
        try {
          map.removeLayer(ctx.getProgressBarMarker());
        } catch {}
        ctx.setProgressBarMarker(null);
        ctx.setIsAirportSpawning(false);
        ctx.activateAirport(pos);
        updatePvoPurchaseAvailability();
      } else {
        requestAnimationFrame(step);
      }
    }
    requestAnimationFrame(step);

    document.querySelectorAll('.pvo-item').forEach((e) => e.classList.remove('selected'));
    sellPVOButton.disabled = true;
    upgradePVOButton.disabled = true;
    upgradeInfo.textContent = '';
  };

  sellPVOButton.onclick = () => {
    const sel = ctx.getSelectedPVO();
    if (!sel) {
      return;
    }
    const refund = calcSellRefund(sel.price, sel.upgradeCount);
    ctx.setMoney(ctx.getMoney() + refund);
    ctx.updateMoney();
    try {
      map.removeLayer(sel.marker);
      if (sel.rangeCircle) {
        map.removeLayer(sel.rangeCircle);
      }
    } catch {}
    const list = ctx.pvoList; // –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–∞—Å–∏–≤
    const idx = list.indexOf(sel);
    if (idx !== -1) {
      list.splice(idx, 1);
    }
    updatePvoPurchaseAvailability();
    ctx.setSelectedPVO(null);
    // –°–∫–∏–¥–∞—î–º–æ UI –≤–∏–±–æ—Ä—É –ø—ñ—Å–ª—è –ø—Ä–æ–¥–∞–∂—É ‚Äî —è–∫ –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—ñ
    sellPVOButton.disabled = true;
    sellPVOButton.innerHTML = 'üí≤ –ü—Ä–æ–¥–∞—Ç–∏ –ü–ü–û';
    upgradePVOButton.disabled = true;
    upgradeInfo.textContent = '';
    if (movePVOButton) {
      movePVOButton.disabled = true;
    }
    document.querySelectorAll('.pvo-item').forEach((e) => e.classList.remove('selected'));
  };

  upgradePVOButton.onclick = () => {
    const sel = ctx.getSelectedPVO();
    if (!sel) {
      return;
    }
    if (sel.noUpgrade) {
      return alert('‚ùå F-16 —Ç–∞ –ê–µ—Ä–æ–ø–æ—Ä—Ç –Ω–µ –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â—É–≤–∞—Ç–∏!');
    }
    if (sel.upgradeCount >= 10) {
      return alert('‚ùå –¶–µ –ü–ü–û –ø–æ–∫—Ä–∞—â–µ–Ω–æ –≤–∂–µ 10 —Ä–∞–∑—ñ–≤ - –±—ñ–ª—å—à–µ –Ω–µ –º–æ–∂–Ω–∞!');
    }
    const price = calcUpgradePrice(sel.upgradeCount);
    if (ctx.getMoney() < price) {
      return alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è, –ø–æ—Ç—Ä—ñ–±–Ω–æ: ${price} –∫–∞—Ä–±–æ–≤–∞–Ω—Ü—ñ–≤.`);
    }
    ctx.setMoney(ctx.getMoney() - price);
    // –ë–∞–ª–∞–Ω—Å: –ø—Ä–∏—Ä—ñ—Å—Ç —É –º–µ–∂–∞—Ö (–¥–æ *3 –≤—ñ–¥ –±–∞–∑–æ–≤–æ–≥–æ)
    sel.damage = Math.min(sel.damage + 6, 3 * sel.baseDamage);
    sel.radius = Math.min(sel.radius + 8, 3 * sel.baseRadius);
    sel.cd = Math.max(sel.cd - 100, 100);
    sel.upgradeCount++;
    upgradeInfo.textContent = `–ü–æ–∫—Ä–∞—â–µ–Ω–æ: ${sel.upgradeCount} / 10`;
    updateUpgradeButtonText();
    if (sel.rangeCircle) {
      const col = pvoColorMap[sel.name] || '#00FF00';
      sel.rangeCircle.setRadius(sel.radius);
      sel.rangeCircle.setStyle({
        color: col,
        fillColor: col,
        fillOpacity: 0.2,
        className: 'no-blur-circle',
      });
    }
    const refund = calcSellRefund(sel.price, sel.upgradeCount);
    sellPVOButton.innerHTML = `üí≤<br>–ü—Ä–æ–¥–∞—Ç–∏ –ü–ü–û<br><span style="white-space: nowrap;">+üí∂${refund}</span>`;
    ctx.updateMoney();
  };

  // –î–æ–ø–æ–º—ñ–∂–Ω—ñ API
  function updatePvoMenuPrice(name) {
    const count = ctx.pvoPurchaseCounts[name] || 0;
    const type = pvoTypes.find((p) => p.name === name);
    const price = calcPurchasePrice(type.price, count);
    document.querySelectorAll('.pvo-item').forEach((e) => {
      const b = e.querySelector('b');
      if (b && b.textContent === name) {
        e.innerHTML = `
          <img src="${type.img}" />
          <b>${name}</b><br/>
          üí∂${price}<br/>
          üìè${type.radius}
        `;
      }
    });
    if (name === '–ê–µ—Ä–æ–ø–æ—Ä—Ç') {
      const btn = document.getElementById('airportButton');
      if (btn) {
        btn.innerHTML = 'üè¢<br>–ê–µ—Ä–æ–ø–æ—Ä—Ç<br>üí∂' + price;
      }
    }
  }

  function updatePvoPurchaseAvailability() {
    const reachedLimit = ctx.pvoList.length >= ctx.getMaxPvoCount();
    const airportAlive = !!(ctx.getAirport() && ctx.getAirport().alive);
    document.querySelectorAll('.pvo-item').forEach((el) => {
      const name = el.querySelector('b')?.textContent;
      const type = pvoTypes.find((p) => p.name === name);
      if (!type) {
        return;
      }
      if (reachedLimit) {
        el.classList.add('disabled');
        el.onclick = () =>
          alert(`‚ùå –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç ${ctx.getMaxPvoCount()} –ü–ü–û. –ü–æ–∫—Ä–∞—â–∏ –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ.`);
        return;
      }
      // –ö–∞—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
      if (type.name === 'F-16' && (!airportAlive || ctx.getIsAirportSpawning())) {
        el.classList.add('disabled');
        el.onclick = () =>
          alert(
            ctx.getIsAirportSpawning()
              ? '‚ùå –ê–µ—Ä–æ–ø–æ—Ä—Ç —â–µ –±—É–¥—É—î—Ç—å—Å—è! –ó–∞—á–µ–∫–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.'
              : '‚ùå –î–ª—è –ø–æ–∫—É–ø–∫–∏ F-16 —Å–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±—É–¥—É–≤–∞—Ç–∏ –ê–µ—Ä–æ–ø–æ—Ä—Ç!'
          );
        return;
      }
      el.classList.remove('disabled');
      el.onclick = () => {
        const count = ctx.pvoPurchaseCounts[type.name] || 0;
        const price = calcPurchasePrice(type.price, count);
        if (ctx.getMoney() < price) {
          alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤. –ü–æ—Ç—Ä—ñ–±–Ω–æ ${Math.round(price)} –∫–∞—Ä–±–æ–≤–∞–Ω—Ü—ñ–≤.`);
          return;
        }
        ctx.setSelectedPVO(type);
        ctx.setBuyingMode(true);
        document.querySelectorAll('.pvo-item').forEach((e) => e.classList.remove('selected'));
        el.classList.add('selected');
        sellPVOButton.disabled = true;
        upgradePVOButton.disabled = true;
      };
    });
    const ab = document.getElementById('airportButton');
    if (ab) {
      if (airportAlive || ctx.getIsAirportSpawning()) {
        ab.disabled = true;
        ab.classList.add('disabled');
      } else {
        ab.disabled = false;
        ab.classList.remove('disabled');
      }
    }
  }

  function updateUpgradeButtonText() {
    const sel = ctx.getSelectedPVO();
    if (!sel) {
      return;
    }
    const price = calcUpgradePrice(sel.upgradeCount);
    upgradePVOButton.innerHTML = 'üìà –ü–æ–∫—Ä–∞—â–∏—Ç–∏ –ü–ü–û<br>üí∂' + price;
  }

  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ API –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∑–æ–≤–Ω—ñ
  return {
    updatePvoMenuPrice,
    updatePvoPurchaseAvailability,
    updateUpgradeButtonText,
    // –¥–æ–¥–∞—Ç–∫–æ–≤–æ ‚Äî —â–æ–± main –º—ñ–≥ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å—Ç–∞–Ω–æ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
    setMoveButtonEnabled: (enabled) => {
      movePVOButton.disabled = !enabled;
    },
    setSellButtonEnabled: (enabled) => {
      sellPVOButton.disabled = !enabled;
    },
    setSellButtonRefund: (refund) => {
      sellPVOButton.innerHTML = `üí≤<br>–ü—Ä–æ–¥–∞—Ç–∏ –ü–ü–û<br><span style="white-space: nowrap;">+üí∂${refund}</span>`;
    },
    setUpgradeButtonDisabled: (disabled) => {
      upgradePVOButton.disabled = !!disabled;
    },
    setUpgradeInfoText: (text) => {
      upgradeInfo.textContent = text || '';
    },
    resetSelectionUi: () => {
      sellPVOButton.disabled = true;
      upgradePVOButton.disabled = true;
      upgradeInfo.textContent = '';
      sellPVOButton.innerHTML = 'üí≤ –ü—Ä–æ–¥–∞—Ç–∏ –ü–ü–û';
      document.querySelectorAll('.pvo-item').forEach((e) => e.classList.remove('selected'));
    },
  };
}
