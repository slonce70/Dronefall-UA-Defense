// –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI‚Äë–ø–æ–ª—è –≥—Ä–æ—à–µ–π
export function updateMoney(el, money) {
  if (el) {
    el.textContent = `üí∂ ${money}`;
  }
}

export function updateUI(moneyEl, waveEl, scoreEl, money, wave, score) {
  updateMoney(moneyEl, money);
  if (waveEl) {
    waveEl.textContent = `üåä ${wave}`;
  }
  if (scoreEl) {
    scoreEl.textContent = `üéØ ${score}`;
  }
}

export function showTargetNotification(region, gameSpeed = 1) {
  const t = document.createElement('div');
  t.className = 'toast-notification';
  t.role = 'status';
  t.textContent = `–ù–∞—Å—Ç—É–ø–Ω–∞ —Ü—ñ–ª—å –≤ ${region} –æ–±–ª–∞—Å—Ç—ñ`;
  document.body.appendChild(t);
  const ttl = Math.max(1000, 3000 / (gameSpeed || 1));
  setTimeout(() => {
    try {
      document.body.removeChild(t);
    } catch {}
  }, ttl);
}

import { createOverlay, el, setText, append } from './utils/DOMSecurity.js';

/**
 * –ü–æ–∫–∞–∑–∞—Ç–∏ –æ–≤–µ—Ä–ª–µ–π –ø–µ—Ä–µ–º–æ–≥–∏ –±–µ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è innerHTML.
 * –°—É–º—ñ—Å–Ω—ñ—Å—Ç—å: —è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ —Ä—è–¥–æ–∫, –≤—ñ–Ω –±—É–¥–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π —è–∫ plain‚Äëtext.
 * –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ: –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∑ –æ–±'—î–∫—Ç–æ–º { message, buttons }.
 * @param {string|{ message: string, buttons?: Array<{ label: string, onClick: () => void, variant?: 'primary'|'secondary'}> }} content
 */
export function showVictoryScreen(content) {
  // –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ, —â–æ —ñ—Å–Ω—É—î –ª–∏—à–µ –æ–¥–∏–Ω –æ–≤–µ—Ä–ª–µ–π –ø–µ—Ä–µ–º–æ–≥–∏
  try {
    const old = document.getElementById('victoryOverlay');
    if (old) old.remove();
  } catch {}

  const { wrap, box } = createOverlay({ id: 'victoryOverlay' });

  if (typeof content === 'string') {
    // Back‚Äëcompat: –ø–æ–∫–∞–∑–∞—Ç–∏ —è–∫ —Ç–µ–∫—Å—Ç (–±–µ–∑ HTML)
    const p = el('div');
    setText(p, content);
    append(box, p);
  } else if (content && typeof content === 'object') {
    const msg = el('div');
    setText(msg, content.message || '');
    append(box, msg);
    if (Array.isArray(content.buttons)) {
      const row = el('div', { className: 'overlay-actions' });
      for (const b of content.buttons) {
        const btn = el('button', {
          className: b.variant === 'secondary' ? 'btn-secondary' : 'btn-primary',
        });
        setText(btn, b.label);
        try {
          btn.addEventListener('click', () => b.onClick && b.onClick());
        } catch {}
        row.appendChild(btn);
      }
      append(box, row);
    }
  }

  document.body.appendChild(wrap);
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ safeOpen –¥–ª—è –≤–∏–ø–∞–¥–∫—ñ–≤, –∫–æ–ª–∏ –π–æ–≥–æ —Ç—Ä–µ–±–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∑ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—ñ–≤ UI
export { safeOpen } from './utils/DOMSecurity.js';
